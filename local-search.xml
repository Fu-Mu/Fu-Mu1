<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lgdx1</title>
    <link href="/lgdx1/"/>
    <url>/lgdx1/</url>
    
    <content type="html"><![CDATA[<h1 id="洛谷-ACM-多校训练-2021第一场"><a href="#洛谷-ACM-多校训练-2021第一场" class="headerlink" title="洛谷 ACM 多校训练 2021第一场"></a>洛谷 ACM 多校训练 2021第一场</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个加权无向图，从1号点点燃，火势沿着边向相邻顶点蔓延，当多股火在一个地方相遇会爆炸，求爆炸几次</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最短路问题。分两种情况：</p><ol><li>在点上爆炸，它的最短路上有两个前驱</li><li>在边上爆炸，边不在最短路上</li></ol><p>wi&lt;=9,可以用桶排的Dijkstra，也可以用堆排的Dijkstra，但是卡SPFA</p><h3 id="C-版本一"><a href="#C-版本一" class="headerlink" title="C++版本一"></a>C++版本一</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">3e5</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxm = <span class="hljs-number">1e6</span> + <span class="hljs-number">7</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">P</span> &#123;</span><br><span class="hljs-keyword">int</span> to, val;<br><span class="hljs-built_in">P</span>() &#123; to = val = <span class="hljs-number">0</span>; &#125;<br><span class="hljs-built_in">P</span>(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b) :<span class="hljs-built_in">to</span>(a), <span class="hljs-built_in">val</span>(b) &#123;&#125;;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> P&amp; t)<span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> val &gt; t.val; &#125;<br>&#125;;<br>vector&lt;P&gt; G[maxm];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>G[u].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">P</span>(v, w));<br><span class="hljs-keyword">if</span> (u != v)G[v].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">P</span>(u, w));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dijk</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>priority_queue&lt;P&gt; q;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">P</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>));dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>P tmp = q.<span class="hljs-built_in">top</span>();q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (vis[tmp.to])<span class="hljs-keyword">continue</span>;<br>vis[tmp.to] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[tmp.to].<span class="hljs-built_in">size</span>(); ++i) &#123;<br><span class="hljs-keyword">int</span> pos = G[tmp.to][i].to;<br><span class="hljs-keyword">int</span> value = G[tmp.to][i].val;<br><span class="hljs-keyword">if</span> (dis[pos] &gt; dis[tmp.to] + value) &#123;<br>dis[pos] = dis[tmp.to] + value;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">P</span>(pos, dis[pos]));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> n, m;<span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br><span class="hljs-keyword">int</span> u, v, w;cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br><span class="hljs-built_in">add</span>(u, v, w); <span class="hljs-comment">// 无向图</span><br>&#125;<br><span class="hljs-built_in">dijk</span>(); <span class="hljs-comment">// 跑一边最短路</span><br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (P v : G[i]) &#123; <span class="hljs-comment">// v:点i的邻接点+权值，前驱、后继。</span><br><span class="hljs-keyword">if</span> (dis[i] == dis[v.to] + v.val) <span class="hljs-comment">// 找交点爆炸</span><br>++cnt; <span class="hljs-comment">// v-&gt;i和dis[i]相同，v可以是最短路上的点</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt;= v.to &amp;&amp; dis[i] + v.val &gt; dis[v.to] &amp;&amp; dis[v.to] + v.val &gt; dis[i])   ++ans;<br>&#125;<br><span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">1</span>)++ans; <span class="hljs-comment">// 俩以上前驱等距离，在交点爆炸1次</span><br>&#125;<br>cout &lt;&lt; ans &lt;&lt; endl;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>输入一个目前的钱数，和现在的年月日，今天给0美元，之后的每一天比前一天多1美元，输出变成亿万富翁的那一天。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>直接暴力不行，利用zeller函数，将日期转换成星期，按月或按年来跳，或二分答案</p><h3 id="C-版本一-1"><a href="#C-版本一-1" class="headerlink" title="C++版本一"></a>C++版本一</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//转星期</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">3</span>) &#123;y --; m += <span class="hljs-number">12</span>;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">365</span> * y + y / <span class="hljs-number">4</span> - y / <span class="hljs-number">100</span> + y / <span class="hljs-number">400</span> + (<span class="hljs-number">153</span> * (m - <span class="hljs-number">3</span>) + <span class="hljs-number">2</span>) / <span class="hljs-number">5</span> + d - <span class="hljs-number">307</span>;<br>&#125;<br><span class="hljs-comment">//转日期</span><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = id + <span class="hljs-number">1789995</span>, n, i, j, y, m, d;<br>    n = <span class="hljs-number">4</span> * x / <span class="hljs-number">146097</span>;<br>    x -= (<span class="hljs-number">146097</span> * n + <span class="hljs-number">3</span>) / <span class="hljs-number">4</span>;<br>    i = (<span class="hljs-number">4000</span> * (x + <span class="hljs-number">1</span>)) / <span class="hljs-number">1461001</span>; x -= <span class="hljs-number">1461</span> * i / <span class="hljs-number">4</span> - <span class="hljs-number">31</span>;<br>    j = <span class="hljs-number">80</span> * x / <span class="hljs-number">2447</span>; d = x - <span class="hljs-number">2447</span> * j / <span class="hljs-number">80</span>; x = j / <span class="hljs-number">11</span>;<br>    m = j + <span class="hljs-number">2</span> - <span class="hljs-number">12</span> * x; y = <span class="hljs-number">100</span> * (n - <span class="hljs-number">49</span>) + i + x;<br>    <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-keyword">int</span>&gt;(&#123;y, m, d&#125;);<br>&#125;<br><br><span class="hljs-comment">//二分答案</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> M, y, m, d;<br>    cin&gt;&gt;M&gt;&gt;y&gt;&gt;m&gt;&gt;d;<br>    <span class="hljs-keyword">int</span> id = <span class="hljs-built_in">getId</span>(y, m, d);<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2e9</span>);<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> v = M + (<span class="hljs-number">0</span> + mid) * (mid + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (v &gt;= <span class="hljs-number">1000000000</span>) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    id += l;<br>    <span class="hljs-keyword">auto</span> ret = <span class="hljs-built_in">date</span>(id);<br>    cout&lt;&lt;ret[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;ret[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;ret[<span class="hljs-number">2</span>]&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span> (T--) <span class="hljs-built_in">work</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>模拟。给一段字符串，执行题目中的50行命令。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>很无语的一道题，不想手打，就去听了听出题人有什么更好的方法。</p><blockquote><ul><li>写一个parser来翻译。</li><li>使用编辑器的查找替换功能删掉一些无用的话，比如‘of the name’, “after the name’啥的，再用parser来翻译。</li><li>进一步替换，发现这个语言的顺序和大多数程序语言非常接近，甚至在一系列替换后可以除了括号都换好，只需要改50个分号。</li></ul></blockquote><p> of ther name,after ther name,do nothing →×<br> is greater than, is not greater than, is less than，is not less than → &gt;,&lt;=,&lt;,&gt;=. is, is not → ==,!=<br> first letter,last letter - name.front()，name.back(). append → name +=</p><p> reverse the name → reverse(name.begin(), name.end())<br> If → if (<br>,→;</p><p>不会写parser，直接放代码了</p><h3 id="C-版本一-2"><a href="#C-版本一-2" class="headerlink" title="C++版本一"></a>C++版本一</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>string name;<br>cin &gt;&gt; name;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;g&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;h&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&#x27;y&#x27;</span>) &amp;&amp; (name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;w&#x27;</span>)) name += <span class="hljs-string">&#x27;j&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;t&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">42</span>)) name += <span class="hljs-string">&#x27;u&#x27;</span>;<br><span class="hljs-keyword">else</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&#x27;v&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;d&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">43</span>)) name += <span class="hljs-string">&#x27;o&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;q&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;m&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;x&#x27;</span>));<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;s&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">22</span>)) name += <span class="hljs-string">&#x27;n&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;t&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;i&#x27;</span>));<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;c&#x27;</span>)) name += <span class="hljs-string">&#x27;e&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() == <span class="hljs-number">42</span>) &amp;&amp; (name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;v&#x27;</span>)) name += <span class="hljs-string">&#x27;u&#x27;</span>;<br><span class="hljs-keyword">else</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">47</span>)) name += <span class="hljs-string">&#x27;j&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;v&#x27;</span>)) name += <span class="hljs-string">&#x27;e&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;d&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;y&#x27;</span>)) name += <span class="hljs-string">&#x27;w&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;u&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;i&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">32</span>)) name += <span class="hljs-string">&#x27;w&#x27;</span>;<br><span class="hljs-keyword">else</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&#x27;i&#x27;</span>) &amp;&amp; (name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;d&#x27;</span>)) name += <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&#x27;y&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;y&#x27;</span>)) name += <span class="hljs-string">&#x27;v&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">50</span>));<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;m&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;t&#x27;</span>)) name += <span class="hljs-string">&#x27;w&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;q&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;t&#x27;</span>)) name += <span class="hljs-string">&#x27;e&#x27;</span>;<br><span class="hljs-keyword">else</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">48</span>)) name += <span class="hljs-string">&#x27;l&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;y&#x27;</span>)) name += <span class="hljs-string">&#x27;w&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">18</span>) &amp;&amp; (name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;b&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">18</span>)) name += <span class="hljs-string">&#x27;y&#x27;</span>;<br><span class="hljs-keyword">else</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&#x27;g&#x27;</span>)) name += <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;q&#x27;</span>));<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;i&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;n&#x27;</span>) &amp;&amp; !(name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">38</span>)) name += <span class="hljs-string">&#x27;o&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;v&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;n&#x27;</span>));<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;z&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() == <span class="hljs-number">21</span>) &amp;&amp; (name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;m&#x27;</span>)) name += <span class="hljs-string">&#x27;u&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;o&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() == <span class="hljs-number">34</span>));<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;z&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;r&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">25</span>)) name += <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;u&#x27;</span>)) name += <span class="hljs-string">&#x27;k&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;l&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">41</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;p&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;p&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;z&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">4</span>) &amp;&amp; (name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;p&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;l&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() == <span class="hljs-number">16</span>) &amp;&amp; (name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;w&#x27;</span>)) name += <span class="hljs-string">&#x27;r&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;o&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;c&#x27;</span>)) name += <span class="hljs-string">&#x27;p&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;i&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() == <span class="hljs-number">20</span>)) name += <span class="hljs-string">&#x27;p&#x27;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() != <span class="hljs-string">&#x27;b&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;p&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;c&#x27;</span>)) name += <span class="hljs-string">&#x27;n&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;l&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">40</span>)) name += <span class="hljs-string">&#x27;d&#x27;</span>;<br><span class="hljs-keyword">else</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;g&#x27;</span>)) name += <span class="hljs-string">&#x27;y&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;i&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;k&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;v&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() == <span class="hljs-number">20</span>) &amp;&amp; (name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;u&#x27;</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">46</span>)) name += <span class="hljs-string">&#x27;v&#x27;</span>;<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;f&#x27;</span>;<br><span class="hljs-keyword">if</span> ((name.<span class="hljs-built_in">front</span>() != <span class="hljs-string">&#x27;i&#x27;</span>));<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;z&#x27;</span>;<br><span class="hljs-keyword">if</span> (!(name.<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">38</span>)) <span class="hljs-built_in">reverse</span>(name.<span class="hljs-built_in">begin</span>(), name.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">else</span> name += <span class="hljs-string">&#x27;b&#x27;</span>;<br>cout &lt;&lt; name &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><p>证明哥德巴赫猜想。输入一个大于2的整数n，输出两个素数，使得两个素数之和等于n</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>直接暴力就行</p><h3 id="C-版本一-3"><a href="#C-版本一-3" class="headerlink" title="C++版本一"></a>C++版本一</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-comment">//判断素数 </span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-built_in">sqrt</span>(n);i++)<br>&#123;<br><span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//素数筛</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">10000</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!a[i])<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i*i;j&lt;=N;j+=i)<br>&#123;<br>a[j]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!a[i]&amp;&amp;<span class="hljs-built_in">prime</span>(n-i))<br>&#123;<br>cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;n-i&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
